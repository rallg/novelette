%% This is file `novelette-relaxed.sty', part of `novelette' document class.
%% Copyright 2024 Robert Allgeyer.
%%
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, version 1.3c
%%
\ProvidesFile{novelette-relaxed.sty}%
[2024/01/14 v0.33 LaTeX file (neutralize some standard LaTeX settings).]
%%


%% NEUTRALIZE SOME STANDARD LATEX SETTINGS AND MACROS
% LaTeX uses flexible `glues' and `skips' to arrange things. The standard
% value for many of these settings interferes with the grid layout used by
% Novelette. So they are set to 0pt, or some other appropriate value.
%   Also, many standard macros and environments are not suitable for Novelette.
% Where possible, they are neutralized (simply do nothing). If that cannot
% easily be done, then they are defined to throw an error.
%   Most prominent: No math! The active characters for math mode, and related
% non-text modes, have their catcodes changed AtBeginDocument.
%%


\setlength\hoffset{0pt}
\setlength\voffset{0pt}
\setlength\fboxrule{0pt}
\setlength\fboxsep{0pt}
\@twocolumnfalse
\@twosidetrue
\setlength\columnsep{0pt}
\setlength\columnseprule{0pt}
\@mparswitchtrue
\setlength\marginparwidth{0pt}
\setlength\marginparsep{0pt}
\setlength\marginparpush{0pt}
\setlength\abovedisplayskip{0pt}
\setlength\abovedisplayshortskip{0pt}
\setlength\belowdisplayshortskip{0pt}
\setlength\belowdisplayskip{0pt}
\setlength\smallskipamount{0pt}
\setlength\medskipamount{0pt}
\setlength\bigskipamount{0pt}
\setlength\topsep{0pt}
\setlength\partopsep{0pt}
\setlength\parsep{0pt}
\setlength\parskip{0pt}
\setlength\floatsep{0pt}
\setlength\@fpsep{0pt}
\setlength\@fptop{0pt}
\setlength\@fpbot{0pt}
\setlength\textfloatsep{0pt}
\setlength\dbltextfloatsep{0pt}
\setlength\intextsep{0pt}
\setlength\lineskip{0pt}
\setlength\normallineskip{0pt}
\setlength\lineskiplimit{0pt}
\renewcommand\baselinestretch{1}
\widowpenalty 150
\clubpenalty 150
\@lowpenalty   51
\@medpenalty  151
\@highpenalty 301
\vbadness=99999 % Suppress nuisance warnings.
\setcounter{topnumber}{2}
\renewcommand\topfraction{1} % Was .7
\setcounter{bottomnumber}{2} % Was 1
\renewcommand\bottomfraction{1} % Was .3
\setcounter{totalnumber}{5} % was 3
\renewcommand\textfraction{0} % Was .2
\renewcommand\floatpagefraction{1} % Was .5
\setcounter{dbltopnumber}{2}
\renewcommand\dbltopfraction{1} % Was .7
\renewcommand\dblfloatpagefraction{1} % Was .5
\DeclareOldFontCommand{\rm}{\normalfont\rmfamily}{\normalfont\rmfamily}
\DeclareOldFontCommand{\sf}{\normalfont\sffamily}{\normalfont\sffamily}
\DeclareOldFontCommand{\tt}{\normalfont\ttfamily}{\normalfont\ttfamily}
\DeclareOldFontCommand{\bf}{}{}
\DeclareOldFontCommand{\it}{\normalfont\itshape}{\normalfont\itshape}
\DeclareOldFontCommand{\sl}{\normalfont\slshape}{\normalfont\slshape}
\DeclareOldFontCommand{\sc}{\normalfont\scshape}{\normalfont\scshape}
\pagestyle{empty}
\pagenumbering{arabic}
\flushbottom
%%


%%
\def\no@cmd#1{Command \string\#1 is not defined in Novelette. Page \this@page.}
\def\part#1{#1\@lert{\no@cmd{par}}}
\def\chapter#1{#1\@lert{\no@cmd{chapter}}}
\def\section#1{#1\@lert{\no@cmd{section}}}
\def\subsection#1{#1\@lert{\no@cmd{subsection}}}
\def\subsubsection#1{#1\@lert{\no@cmd{subsubsection}}}
\def\paragraph#1{#1\@lert{\no@cmd{paragraph}}}
\def\subparagraph#1{#1\@lert{\no@cmd{subparagraph}}}
\def\appendix#1{#1\@lert{\no@cmd{appendix}}}
\def\maketitle{\@lert{\no@cmd{maketitle}}}
\def\makeindex{\@lert{\no@cmd{makeindex}}}
\long\def\theindex{\@lert{\no@cmd{theindex}}}
\long\def\tableofcontents{\@lert{\no@cmd{tableofcontents}}}
\long\def\listoftables{\@lert{\no@cmd{listoftables}}}
\long\def\listoffigures{\@lert{\no@cmd{listoffigures}}}
\def\caption#1{#1\@lert{\no@cmd{caption}}}
\long\def\index#1{#1\@lert{\no@cmd{maketitle}}}


%%
\def\nodo@env#1{%
  \nvt@err{Environment '#1' not allowed}%
    {Novelette disables many standard LaTeX environments.^^J%
     That environment will be ignored. Consequences unknown.}%
}
\DeclareDocumentEnvironment{abstract}{+b}{\nodo@env{abstract}}{}
\DeclareDocumentEnvironment{array}{m}{\nodo@env{array}}{}
\DeclareDocumentEnvironment{description}{+b}{\nodo@env{description}}{}
\DeclareDocumentEnvironment{displaymath}{+b}{\nodo@env{displaymath}}{}
\DeclareDocumentEnvironment{enumerate}{+b}{\nodo@env{enumerate}}{}
\DeclareDocumentEnvironment{eqnarray}{s}{\nodo@env{astract}}{}
\DeclareDocumentEnvironment{equation}{+b}{\nodo@env{equation}}{}
\DeclareDocumentEnvironment{figure}{sO{}}{\nodo@env{figure}}{}
\DeclareDocumentEnvironment{itemize}{+b}{\nodo@env{itemize}}{}
\DeclareDocumentEnvironment{labeling}{s}{\nodo@env{labeling}}{}
\DeclareDocumentEnvironment{list}{mm}{\nodo@env{list}}{}
\DeclareDocumentEnvironment{math}{+b}{\nodo@env{math}}{}
\DeclareDocumentEnvironment{minipage}{sO{}m}{\nodo@env{minipage}}{}
\def\@picture(#1,#2)(#3,#4){\nodo@env{picture}} \def\endpicture{}
\DeclareDocumentEnvironment{quotation}{+b}{\nodo@env{quotation}}{}
\DeclareDocumentEnvironment{quote}{+b}{\nodo@env{quote}}{}
\DeclareDocumentEnvironment{tabbing}{+b}{\nodo@env{tabbing}}{}
\DeclareDocumentEnvironment{table}{sO{}}{\nodo@env{table}}{}
\DeclareDocumentEnvironment{tabular}{+m}{\nodo@env{tabular}}{}
\DeclareDocumentEnvironment{theorem}{+b}{\nodo@env{theorem}}{}
\DeclareDocumentEnvironment{titlepage}{+b}{\nodo@env{titlepage}}{}
\DeclareDocumentEnvironment{verbatim}{+b}{\nodo@env{verbatim}}{}
\DeclareDocumentEnvironment{verse}{+b}{\nodo@env{verse}}{}
%%


%%%%%
% Code modified from `import.sty'  Ver 6.2  01-Apr-2020  Donald Arseneau.
% Its license: This software is in the public domain; free of any restrictions.
\newcommand{\nvt@subimport}{\@doimport\input} %%%%%
\def\@doimport#1{\@sub@import#1\im@iffileexists}
% #1 = import command,  #2 = switch for *,  #3 = import path extension
\def\@sub@import#1#2#3{%
  \begingroup
  \protected@edef\@tempa{\endgroup
    \let\noexpand\IfFileExists\noexpand#2%
    \noexpand\@import  \noexpand#1%  param 1
      {\@ifundefined{input@path}{}{\input@path}}% 2
      {\@ifundefined{Ginput@path}{}{\Ginput@path}}% 3
      {\import@path#3}{\import@path}% 4,5
      {\ifx\IfFileExists\im@@IfFileExists \noexpand\im@@IfFileExists 
       \else \noexpand\IfFileExists \fi}}% 6
  \@tempa}
%
% #1 = import command (\input or \include)
% #2 = previous input path list. #3 = previous graphics input path list.
% #4 = full path added to each.  #5 = previous import path.  
% #6 = previous \IfFileExists.   #7 = file name.
%
\def\@import#1#2#3#4#5#6#7{%
  \protected@xdef\import@path{\import@path@fix{#4}}%
  \protected@edef\input@path{{\import@path}#2}%
  \protected@edef\import@path@file{% use full path/file for non-*
    \import@path #7}%
  \expandafter#1\expandafter{\import@path@file}%
  \let\IfFileExists#6% restore after \import*
  \gdef\import@path{#5}%
  \def\input@path{#2}\ifx\input@path\@empty \let\input@path\@undefined \fi
}
% Our version of \IfFileExists that gives priority to files on \input@path,
% #1 = file name,  #2 = action when exists, #3 = action when not exists
\DeclareRobustCommand\im@iffileexists[1]{%
  \set@curr@file{#1}%
  \expandafter\im@iffileexists@\expandafter{\@curr@file}}
\long\def \im@iffileexists@#1#2#3{%
  \let\@filef@und\@undefined
  \ifx\input@path\@undefined\else 
    \@iffileonpath{#1}{% (also defines \@filef@und)
      \def\reserved@a{#2}%
    }{}% no action yet for not found
  \fi
  \ifx\@filef@und\@undefined % not found on \input@path
    \openin\@inputcheck"#1" %
    \ifeof\@inputcheck
      \def\reserved@a{#3}%
    \else
      \closein\@inputcheck
      \edef\@filef@und{"#1" }%
      \def\reserved@a{#2}%
  \fi\fi
  \reserved@a
}
\let\im@@IfFileExists\IfFileExists % remember original
\gdef\import@path{}
\let\import@path@fix\@firstofone % default
% Check for "./" currdir, and make \import@path@fix ensure trailing /
\gdef\@gtempa{./}
\ifx\@gtempa\@currdir % *x style paths
\gdef\import@path@fix#1{\ifx\delimiter#1\delimiter\else
  \@ensure@one@trailing@slash#1///\delimiter\fi}%
 \gdef\@ensure@one@trailing@slash#1///#2\delimiter{#1/}%
\fi
% Check for "[]" currdir (VMS file names) and set \import@path@fix appropriately
% \subimport{[.subdir]}{file}
\gdef\@gtempa{[]}
\ifx\@gtempa\@currdir % VMS directory syntax
 \gdef\import@path@fix#1{\@gobbleVMSbrack#1][>}
 \gdef\@gobbleVMSbrack#1][#2{#1\ifx>#2\@empty
    \expandafter \strip@prefix \fi % Gobble up to >
    \@gobbleVMSbrack #2}
\fi
%%%%%



%%
\endinput
%%
%% End of file `novelette-relaxed.sty'.
