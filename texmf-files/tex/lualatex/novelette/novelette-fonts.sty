%% This is file `novelette-fonts.sty', part of `novelette' document class.
%% Copyright 2023 Robert Allgeyer.
%%
%% This file may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, version 1.3c.
%%
\ProvidesFile{novelette-fonts.sty}%
[2023/12/15 v0.25 LaTeX file (font settings and defaults).]
%%


%% This file is loaded AtEndPreamble, when processing interior (not cover).


%% Math? Bah! Swainson has ssty with math script. Not enough for actual math.
\setmathrm{Swainson}
%%


%% Hat tip to Marcel Krüger, tex.stackexchange.com q. 684762:
\directlua{
  fonts.handlers.otf.addfeature {
    name = 'nvt_liga',
    type = 'ligature',
    data = {
      [0x2014] = {0x2014, 0x002D},
    },
  }
}
%%


%%
\defaultfontfeatures{} % Reset.
\defaultfontfeatures{RawFeature={tlig,nvt_liga,kern}} % All fonts.
%%


%% Swainson character variants for increased bearings in french.
% In locations where you do not use Swainson, you must manually type the space.
\def\fr@feat{}
\ifthenelse{\equal{\set@lang}{french}}{
  % Option [fr] and default without option: Thin space before :;!? and
  % closing single/double guillemets, emdash, uni2015.
  % Also after opening single/double guillemets. 
  \ifthenelse{\equal{\lang@option}{fr}\OR\equal{\lang@option}{}}{
    \gdef\fr@feat{RawFeature={+cv20,+cv21}} % Thin space punct and colon.
  }{}
  % Option [ch] is like [fr], but with full space before colon.
  \ifthenelse{\equal{\lang@option}{ch}}{
    \gdef\fr@feat{RawFeature={+cv20,+cv22}}
  }{}
  % Option [ca] only provides thin space before colon.
  \ifthenelse{\equal{\lang@option}{ca}}{
   \gdef\fr@feat{RawFeature={+cv21}}
  }{}
  % Option [x] provides no extra spacing.
}{}
%%


%% PROCESS FONTS
\newlength\X@ht % X-height of Swainson.
\newlength\x@ht % x-height of Swainson.
\newlength\chars@ht % Max height of Swainson Latin-1 characters.
\newlength\chars@dp % Max depth of Swainson Latin-1 characters (positive).
\newcounter{fallback@count} % Incremented if \alt{char} without font.
\def\swainson@feat{%
  ItalicFont=Swainson-Italic.otf, BoldFont=Swainson-Regular.otf,
  BoldItalicFont=Swainson-Italic.otf, \fr@feat
}
\def\fallback@feat{%
  ItalicFont=LibertinusSerif-Italic.otf, BoldFont=LibertinusSerif-Regular.otf,
  BoldItalicFont=LibertinusSerif-Italic.otf
}
\def\sanshf@feat{%
  ItalicFont=LibertinusSans-Italic.otf, BoldFont=LibertinusSans-Regular.otf,
  BoldItalicFont=LibertinusSans-Italic.otf
}
\def\process@fonts{
  % main font:
  \setmainfont{Swainson-Regular.otf}% Body text.
    [\swainson@feat, Numbers=OldStyle]
  \let\mainfont\rmfamily\relax
  \let\main\relax
  % sans font, used for header/footer. Not necessarily sans:
  \ifsans@hf
    \setsansfont{LibertinusSans-Regular.otf}%
      [\sanshf@feat, Scale=.9, LetterSpace=6, WordSpace=1.4]
  \else
    \setsansfont{Swainson-Regular.otf}%
      [\swainson@feat, Scale=.9, LetterSpace=6, WordSpace=1.4]
  \fi
  \let\hf@sansfamily\sffamily\relax
  \gdef\head@font##1{%
    \ifsans@hf%
      \StrSubstitute{##1}{‖}{|\kern-.1em|}[\temp@s]%
      {\hf@sansfamily\temp@s}%
    \else%
      {\hf@sansfamily##1}%
    \fi%
  }
  \let\sffamily\relax % Ignore \sffamily elsewhere.
  % mono font, used for footnotes and smalltext. Not actually monospace:
  \setmonofont{Swainson-Regular.otf}
    [\swainson@feat, Numbers=OldStyle, FakeStretch=1.1, LetterSpace=.4, %
     WordSpace=1.04]
  \let\footnote@font\ttfamily\relax
  \long\gdef\alt@footnote@size{%
     \@setfontsize\alt@footnote@size{.83\type@size}{.83\@leading}%
  }
  \let\ttfamily\relax % Ignore \ttfamily elsewhere.
  % fallback font:
  \iffallback@enabled
    \newfontfamily\fallback@font{LibertinusSerif-Regular.otf}%
      [\fallback@feat, Numbers=OldStyle, LetterSpace=2]
    \gdef\alt##1{% This calculation is specific to Libertinus Serif.
      \StrSubstitute{##1}{‖}{|\kern-.1em|}[\temp@s]% Double bar is too tall.
      \sbox0{\fallback@font\temp@s}%
      \@okfalse% lowercase when false, uppercase when true.
      \comp@re{\ht0>.644\type@size}{%
        \comp@re{\ht0<.661\type@size}{\@oktrue}{}%
      }{}%
      \comp@re{\ht0>.799\type@size}{\@oktrue}{}%
      \if@ok%
        {\fallback@font\temp@s\obeyspaces}%
      \else%
        {\fallback@font%
         \addfontfeature{ScaleAgain=.93,FakeStretch=1.02}\temp@s\obeyspaces}%
      \fi%
    }
  \else
    \gdef\alt##1{%
      \comp@re{\value{fallback@count}=0}{}{\std@error{J}}%
      {##1\obeyspaces}%
      \@lert{\string\alt, or \string\fallback, missing font, page \this@page.}%
      \stepcounter{fallback@count}%
    }
  \fi
  \let\fallback\alt\relax
  \let\textfallback\alt\relax % Mentioned elsewhere, online.
  % Swainson Metrics:
  \global\deflength\X@ht{.65\type@size}
  \global\deflength\x@ht{.4\type@size}
  \global\deflength\chars@ht{.84\type@size}
  \global\deflength\chars@dp{.26\type@size} % It is actually less.
  \edef\chars@line{\fpeval{trunc(\textwidth / (.41*\type@size),0)}}
  \setlength\temp@l{\m@top+.5\pageheight-.5\trim@h-1in}
  \global\deflength\topmargin{\temp@l+\chars@ht-\@leading}
  \process@protexp % Lower on this page.
}
%%


%% FEATURE COMMANDS
\def\sups#1{\strut%
  {\addfontfeature{Numbers=ResetAll,VerticalPosition=Superior}#1}%
}
\let\sup\sups\relax
%%
\def\subs#1{\strut%
  {\addfontfeature{Numbers=ResetAll,VerticalPosition=Inferior}#1}%
}
\let\sub\subs\relax
%%
\long\def\smcp#1{\strut{\addfontfeature{Letters=SmallCaps}#1}}
\long\def\allsmcp#1{% uppercase+lowercase to small caps
  \strut{\addfontfeature{Letters=UppercaseSmallCaps,Letters=SmallCaps}#1}%
}
\let\textsc\smcp\relax % unified
\let\oldscshape\scshape\relax % unified
\let\scshape\smcp\relax % unified
%%
\long\def\hist#1{\strut{\addfontfeature{RawFeature={hist}}#1}} % IVXCDM.
\long\def\lnum#1{\strut{\addfontfeature{Numbers=ResetAll,Numbers=Lining}#1}}
\long\def\onum#1{\strut{\addfontfeature{Numbers=ResetAll,Numbers=Lowercase}#1}}
%% Fake medium caps:
\DeclareDocumentCommand\medcap{m}{%
  \strut\smash{{\addfontfeature{Letters=UppercaseSmallCaps,%
    ScaleAgain=1.22,FakeStretch=.88}#1}\strut}%
}
\let\medcaps\medcap\relax
%%

%% Font expansion and protrusion (does not need microtype).
%  Values 20 20 1 use font expansion (sretch/shrink) +/- 2%, steps 0.1%.
%    The \lpcode and \rpcode values are in font units, 1000/em.
%  Positive codes are set to absorb the left/right bearing of that character.
%  Negative codes are se to push back left\right overhand of that character.
%    The values are specific to Swainson fonts, and are not needed for those
%  places where \alt font (Libertinus Serif) may be used as fallback,
%  or in sans headers (Liberinus Sans).
\gdef\process@protexp{
  \expandglyphsinfont\the\font 20 20 1
    \begingroup\itshape\expandglyphsinfont\the\font 20 20 1\endgroup
    \begingroup
      \sffamily\expandglyphsinfont\the\font 20 20 1
      \lpcode\font`\-=57  \rpcode\font`\-=56
      \lpcode\font`\,=17  \rpcode\font`\,=40
      \lpcode\font`\.=40  \rpcode\font`\.=40
      \lpcode\font`\:=40  \rpcode\font`\;=40
      \lpcode\font`\;=17  \rpcode\font`\;=40
      \lpcode\font`\‘=40  \rpcode\font`\‘=40
      \lpcode\font`\’=40  \rpcode\font`\’=40
      \lpcode\font`\“=56  \rpcode\font`\“=56
      \lpcode\font`\”=56  \rpcode\font`\”=56
      \lpcode\font`\«=22  \rpcode\font`\«=37
      \lpcode\font`\»=37  \rpcode\font`\»=22
      \lpcode\font`\‹=22  \rpcode\font`\‹=37
      \lpcode\font`\›=37  \rpcode\font`\›=22

      \lpcode\font`\J=-62 \rpcode\font`\J=0
      \lpcode\font`\Q=0   \rpcode\font`\Q=28
      \lpcode\font`\f=0   \rpcode\font`\f=6

      \lpcode\font`\j=-45 \rpcode\font`\j=0

      %     ‐‑‒–—―‚‛„  florin dotlessj ff Jlining J.c2sc J.sc
      \itshape\expandglyphsinfont\the\font 20 20 1
    \endgroup
    \begingroup
      \ttfamily\expandglyphsinfont\the\font 20 20 1
      \itshape\expandglyphsinfont\the\font 20 20 1
    \endgroup
  \adjustspacing=2 % Necessary, or above expansions do not work.
  \protrudechars=2 % Necessary, or the above protrusions do not work.
}
%%


%%
\endinput
%%
%% End of file `novelette-fonts.sty'
